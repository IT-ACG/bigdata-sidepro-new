package user_location

import org.apache.spark.{SparkConf, SparkContext}

/**
  * Created by fqc on 2016/7/22.
  */
object UserLocation {
  def main(args: Array[String]) {

    val conf: SparkConf = new SparkConf().setAppName("UserLocation").setMaster("local[2]")
    val sc: SparkContext = new SparkContext(conf)

    //    sc.textFile("c:/1.log)").map(_.split(",")).map(x=>(x(0),x(1),x(2),x(3)))
    val rdd1 = sc.textFile("c:\\userLocation").map(line => {
      //一定要记住这里是读取目录,且注意数据源头的格式..很坑的 最好统一为unix系统格式
      val fileds = line.split(",")
      val phoneNo = fileds(0)
      val time = fileds(1)
      val lac = fileds(2)
      val state = fileds(3)
      var calTime = 0L
      if (state == "1") calTime = -time.toLong else calTime = time.toLong //时间与事件类型需要处理 如果建立连接将设置为负
      (phoneNo + "_" + lac, calTime)
    })
    //println(rdd1.collect.toBuffer) ArrayBuffer((15201098976_9F36407EAD0629FC166F14DDE7970F68,-20160327075000,1), (15201098976_9F36407EAD0629FC166F14DDE7970F68,20160327081000,0), (15201098976_CC0710CC94ECC657A8561DE549D940E0,-20160327081100,1), (15201098976_CC0710CC94ECC657A8561DE549D940E0,20160327082000,0), (13331178849_16030401EAFB68F1E3CDF819735E1C66,-20160327082400,1), (15201098976_16030401EAFB68F1E3CDF819735E1C66,-20160327082500,1), (13331178849_16030401EAFB68F1E3CDF819735E1C66,20160327170000,0), (15201098976_16030401EAFB68F1E3CDF819735E1C66,20160327180000,0), (13331178849_CC0710CC94ECC657A8561DE549D940E0,-20160327171000,1), (13331178849_CC0710CC94ECC657A8561DE549D940E0,-20160327171600,1), (15201098976_CC0710CC94ECC657A8561DE549D940E0,-20160327180500,1), (15201098976_CC0710CC94ECC657A8561DE549D940E0,20160327181500,0), (15201098976_9F36407EAD0629FC166F14DDE7970F68,-20160327182000,1), (15201098976_9F36407EAD0629FC166F14DDE7970F68,20160327230000,0), (18688888888_16030401EAFB68F1E3CDF819735E1C66,-20160327082400,1), (18611132889_16030401EAFB68F1E3CDF819735E1C66,-20160327082500,1), (18688888888_16030401EAFB68F1E3CDF819735E1C66,20160327170000,0), (18611132889_16030401EAFB68F1E3CDF819735E1C66,20160327180000,0))
    val rdd2 = rdd1.groupBy(_._1)
    println(rdd2.collect().toBuffer)//ArrayBuffer((15201098976_9F36407EAD0629FC166F14DDE7970F68,CompactBuffer((15201098976_9F36407EAD0629FC166F14DDE7970F68,-20160327075000), (15201098976_9F36407EAD0629FC166F14DDE7970F68,20160327081000), (15201098976_9F36407EAD0629FC166F14DDE7970F68,-20160327182000), (15201098976_9F36407EAD0629FC166F14DDE7970F68,20160327230000))), (13331178849_CC0710CC94ECC657A8561DE549D940E0,CompactBuffer((13331178849_CC0710CC94ECC657A8561DE549D940E0,-20160327171000), (13331178849_CC0710CC94ECC657A8561DE549D940E0,-20160327171600))), (15201098976_CC0710CC94ECC657A8561DE549D940E0,CompactBuffer((15201098976_CC0710CC94ECC657A8561DE549D940E0,-20160327081100), (15201098976_CC0710CC94ECC657A8561DE549D940E0,20160327082000), (15201098976_CC0710CC94ECC657A8561DE549D940E0,-20160327180500), (15201098976_CC0710CC94ECC657A8561DE549D940E0,20160327181500))), (13331178849_16030401EAFB68F1E3CDF819735E1C66,CompactBuffer((13331178849_16030401EAFB68F1E3CDF819735E1C66,-20160327082400), (13331178849_16030401EAFB68F1E3CDF819735E1C66,20160327170000))), (15201098976_16030401EAFB68F1E3CDF819735E1C66,CompactBuffer((15201098976_16030401EAFB68F1E3CDF819735E1C66,-20160327082500), (15201098976_16030401EAFB68F1E3CDF819735E1C66,20160327180000))), (18611132889_16030401EAFB68F1E3CDF819735E1C66,CompactBuffer((18611132889_16030401EAFB68F1E3CDF819735E1C66,-20160327082500), (18611132889_16030401EAFB68F1E3CDF819735E1C66,20160327180000))), (18688888888_16030401EAFB68F1E3CDF819735E1C66,CompactBuffer((18688888888_16030401EAFB68F1E3CDF819735E1C66,-20160327082400), (18688888888_16030401EAFB68F1E3CDF819735E1C66,20160327170000))))
    //将时间累加
    val rdd3= rdd2.mapValues(_.foldLeft(0L)(_+_._2))
    println(rdd3.collect().toBuffer) //ArrayBuffer((15201098976_9F36407EAD0629FC166F14DDE7970F68,54000), (13331178849_CC0710CC94ECC657A8561DE549D940E0,-40320654342600), (15201098976_CC0710CC94ECC657A8561DE549D940E0,1900), (13331178849_16030401EAFB68F1E3CDF819735E1C66,87600), (15201098976_16030401EAFB68F1E3CDF819735E1C66,97500), (18611132889_16030401EAFB68F1E3CDF819735E1C66,97500), (18688888888_16030401EAFB68F1E3CDF819735E1C66,87600))

    //用户在每个基站停留的时间
    //val rdd4 = rdd3.map(_._1.split("_"))//map返回自定义函数里的迭代结果
    val rdd4 = rdd3.map(t=>{
      val mobile = t._1.split("_")(0)
      val lac = t._1.split("_")(1)
      val time = t._2
      (mobile,lac,time)
    })

    println(rdd4.collect().toBuffer)//ArrayBuffer((15201098976,9F36407EAD0629FC166F14DDE7970F68,54000), (13331178849,CC0710CC94ECC657A8561DE549D940E0,-40320654342600), (15201098976,CC0710CC94ECC657A8561DE549D940E0,1900), (13331178849,16030401EAFB68F1E3CDF819735E1C66,87600), (15201098976,16030401EAFB68F1E3CDF819735E1C66,97500), (18611132889,16030401EAFB68F1E3CDF819735E1C66,97500), (18688888888,16030401EAFB68F1E3CDF819735E1C66,87600))
    //按照手机号分组
    val rdd5= rdd4.groupBy(_._1)
    println(rdd5.collect().toBuffer)//ArrayBuffer((18688888888,CompactBuffer((18688888888,16030401EAFB68F1E3CDF819735E1C66,87600))), (18611132889,CompactBuffer((18611132889,16030401EAFB68F1E3CDF819735E1C66,97500))), (15201098976,CompactBuffer((15201098976,9F36407EAD0629FC166F14DDE7970F68,54000), (15201098976,CC0710CC94ECC657A8561DE549D940E0,1900), (15201098976,16030401EAFB68F1E3CDF819735E1C66,97500))), (13331178849,CompactBuffer((13331178849,CC0710CC94ECC657A8561DE549D940E0,-40320654342600), (13331178849,16030401EAFB68F1E3CDF819735E1C66,87600))))

    //找出手机在基站停留时间的最长2位
    val rdd6 = rdd5.mapValues(it=>{
      it.toList.sortBy(_._3).reverse.take(2)
    })
    println(rdd6.collect().toBuffer) //ArrayBuffer((18688888888,List((18688888888,16030401EAFB68F1E3CDF819735E1C66,87600))), (18611132889,List((18611132889,16030401EAFB68F1E3CDF819735E1C66,97500))), (15201098976,List((15201098976,16030401EAFB68F1E3CDF819735E1C66,97500), (15201098976,9F36407EAD0629FC166F14DDE7970F68,54000))), (13331178849,List((13331178849,16030401EAFB68F1E3CDF819735E1C66,87600), (13331178849,CC0710CC94ECC657A8561DE549D940E0,600))))

    sc.stop()
  }
}
